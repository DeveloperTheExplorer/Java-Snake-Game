import java.awt.Color;
import javax.swing.*;
import java.awt.Graphics;
import java.awt.event.*;
import java.awt.Image;
import java.util.Random;
import java.util.ArrayList;
import java.awt.Point;
import java.awt.event.KeyEvent;


public class Snake extends javax.swing.JFrame implements KeyListener {
    
    private final int squareSize = 20;
    private final int gridCount = 33;
    private final int gridSize = squareSize * gridCount;
    private final int offSet = 50;
    
    private Color[] colors;
    private int[][] grid = new int[gridCount][gridCount];
    private final Color borderColor = new Color(20,20,20);
    
    private Graphics sqr;
    private Image img;
    
    private javax.swing.Timer timmy;
    private final int stepDelay = 50;
    private boolean active;
    private boolean gameOver = false;
    
    ArrayList<Point> snake;
    private int score = 0;
    private int highScore = 0;
    private int randX;
    private int randY;
    private Point apple = new Point(12, 15);
    private boolean movingLeft = false; 
    private boolean movingUp = true;
    private boolean movingRight = false;
    private boolean movingDown = false;
    
    int x = 0;
    int y = 0;
    
    
    
    
    public Snake() {
        timmy=new javax.swing.Timer(stepDelay, new TimerListener());
        timmy.start();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        addKeyListener(this);
        this.setFocusable(true);
        this.setAlwaysOnTop(true);
        
        
        initComponents();
        buffer();
        takeCareOfResizing();
        setUpColors();
        clearGrid();
        draw();
        drawWalls();
        
        snake = new ArrayList<Point>();
        for(int i = 10; i < 15; i++) {
            snake.add(new Point(20, i));
        }
    }
    
    public void buffer() {
        img = this.createImage(700, 700);
        sqr = img.getGraphics();
    }
    
    public void takeCareOfResizing(){
         this.addComponentListener(new ComponentAdapter() {
           public void componentResized(ComponentEvent e) {
              draw(); 
           }  
           public void componentMoved(ComponentEvent e) {
              draw();
           }
         });
    }
    
    //fills the grid with 1's (represents white!)
    public void clearGrid(){
        for(int c=0; c<gridCount; c++)
            for(int r=0; r<gridCount; r++)
                grid[c][r]=0;
        
        draw();
    }
    
    public void draw(){
        
        //clear the area, draw white background
        sqr.clearRect(0, 0, gridSize,gridSize);
        sqr.setColor(Color.white);
        sqr.fillRect(0, 0, gridSize, gridSize);
        
        //draws individual squares (pass this method the frames graphics object
        drawSquares(sqr);
        
        //draws a black border around edge of grid
        sqr.setColor(Color.black);
        sqr.drawRect(0,0,gridSize,gridSize);
        
        //all done drawing your stuff onto the image buffer?
        //get the frame's graphics object and draw our image buffer onto the frame
        Graphics g = this.getGraphics();
        g.drawImage(img,offSet,offSet,this);
    }
    
    
    //draws the individual colored squares that make the grid using the values
    //stored in the grid matrix.
    public void drawSquares(Graphics g){
       //draw each square (remember that squareSize is size of each square...
       g.setColor(Color.BLACK);
       for(int r=0; r<gridCount; r++){
           for(int c=0; c<gridCount; c++) {
               g.setColor(colors[ grid[c][r] ] );
               g.fillRect(c*squareSize, r*squareSize, squareSize, squareSize);      
               g.setColor(borderColor);
               g.drawRect(c*squareSize, r*squareSize, squareSize, squareSize);
           }
       }
    }
    
    public void setUpColors(){
        colors=new Color[4];
        colors[0]=Color.darkGray;  colors[1]=Color.white; colors[2]=Color.red;  colors[3]=Color.green; 
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(39, 203, 42));
        jLabel1.setText("Your Score:");

        jLabel2.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(39, 203, 42));
        jLabel2.setText("High Score:");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(39, 203, 42));
        jLabel3.setText("0");
        jLabel3.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel3AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(39, 203, 42));
        jLabel4.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(28, 209, 29));
        jButton1.setText("Restart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(824, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(494, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel3AncestorAdded
//        jLabel3.setText("0");
    }//GEN-LAST:event_jLabel3AncestorAdded

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Snake().setVisible(true);
            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    public void drawWalls() {
        for(int i = 0; i < gridCount; i++) {
            grid[0][i] = 1;
            grid[gridCount - 1][i] = 1;
            grid[i][0] = 1;
            grid[i][gridCount - 1] = 1;
        }
    }
    

    
    
    public void frameRunner() {
        // Don't do anything if they have already lost
        if(gameOver) {
            return;
        }
        // Move the snake depending on the direction
        if(movingUp) {
            y = (int) snake.get(0).getY() -1;
            if(y == 0) {
                y = 29;
                GameOver();
            }
            x = (int) snake.get(0).getX();
        } else if(movingRight) {
            x = (int) snake.get(0).getX() +1;
            if(x == gridCount - 1) {
                x = 0;
                GameOver();
            }
            y = (int) snake.get(0).getY();
        } else if(movingDown) {
            y = (int) snake.get(0).getY() +1;
            if(y == gridCount - 1) {
                y = 0;
                GameOver();
            }
            x = (int) snake.get(0).getX();
        } else if(movingLeft) {
            x = (int) snake.get(0).getX() -1;
            if(x == 0) {
                x = 29;
                GameOver();
            }
            y = (int) snake.get(0).getY();
        }
        snake.add(0, new Point(x, y));
        grid[(int) snake.get(snake.size() - 1).getX()][(int) snake.get(snake.size() - 1).getY()] = 0;
        snake.remove(snake.size() - 1);
        
        // Check to see if the snake bit itself
        for(int i = 1; i < snake.size(); i++) {
            if(snake.get(0).getX() == snake.get(i).getX() && snake.get(0).getY() == snake.get(i).getY()) {
                GameOver();
            }
        }
        
        
        //Check to see if the snake ate the apple
        grid[(int)apple.getX()][(int)apple.getY()] = 2;
        for(int i = 0; i < snake.size(); i++) {
            if(snake.get(i).getX() == apple.getX() && snake.get(i).getY() == apple.getY()) {
                generateApple();
            }
        }
        
        
        //Redraw snake
        for(int i = 0; i < snake.size(); i++) {
            grid[(int)snake.get(i).getX()][(int)snake.get(i).getY()] = 3;
        }
        if(!gameOver) {
            draw();
        }
    }
    
    public void GameOver() {
        gameOver = true;
        clearGrid();
        gameOverText();
        draw();
        
        if(score > highScore) {
            highScore = score;
            jLabel4.setText(highScore + "");
        }
    }
    
    public void generateApple() {
        score += 75;
        jLabel3.setText(score+"");
        randX = (int) (Math.random() * (gridCount - 2)) + 1;
        randY = (int) (Math.random() * (gridCount - 2)) + 1;
        
        apple = new Point(randX, randY);
        snake.add(0, new Point(x, y));
        
    }
    
    private class TimerListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            frameRunner();
        }
    }
    
    public void keyReleased(KeyEvent event) {
    }
    public void keyTyped(KeyEvent event) {
    }
    public void keyPressed(KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_UP && !movingDown) {
            movingUp = true;
            movingLeft = movingRight = movingDown = false;
        } else if (event.getKeyCode() == KeyEvent.VK_RIGHT && !movingLeft) {
            movingRight = true;
            movingLeft = movingUp = movingDown = false;
        } else if (event.getKeyCode() == KeyEvent.VK_DOWN  && !movingUp) {
            movingDown = true;
            movingLeft = movingRight = movingUp = false;
        } else if (event.getKeyCode() == KeyEvent.VK_LEFT  && !movingRight) {
            movingLeft = true;
            movingUp = movingRight = movingDown = false;
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Snake.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Snake.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Snake.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Snake.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Snake().setVisible(true);
            }
        });
    }
    
    public void gameOverText() {
        // G for GAME OVER
        grid[9][6] = 1;
        grid[8][5] = 1;
        grid[7][5] = 1;
        grid[6][5] = 1;
        grid[5][6] = 1;
        grid[5][7] = 1;
        grid[5][8] = 1;
        grid[5][9] = 1;
        grid[5][10] = 1;
        grid[6][11] = 1;
        grid[7][11] = 1;
        grid[8][11] = 1;
        grid[9][10] = 1;
        grid[9][9] = 1;
        grid[8][9] = 1;
        
        //A
        grid[11][11] = 1;
        grid[11][10] = 1;
        grid[11][9] = 1;
        grid[11][8] = 1;
        grid[11][7] = 1;
        grid[11][6] = 1;
        grid[12][5] = 1;
        grid[13][5] = 1;
        grid[14][5] = 1;
        grid[15][11] = 1;
        grid[15][10] = 1;
        grid[15][9] = 1;
        grid[15][8] = 1;
        grid[15][7] = 1;
        grid[15][6] = 1;
        grid[12][9] = 1;
        grid[13][9] = 1;
        grid[14][9] = 1;
        
        //M
        grid[17][11] = 1;
        grid[17][10] = 1;
        grid[17][9] = 1;
        grid[17][8] = 1;
        grid[17][7] = 1;
        grid[17][6] = 1;
        grid[17][5] = 1;
        grid[18][6] = 1;
        grid[19][7] = 1;
        grid[20][6] = 1;
        grid[21][11] = 1;
        grid[21][10] = 1;
        grid[21][9] = 1;
        grid[21][8] = 1;
        grid[21][7] = 1;
        grid[21][6] = 1;
        grid[21][5] = 1;
        
        //E
        grid[23][11] = 1;
        grid[23][10] = 1;
        grid[23][9] = 1;
        grid[23][8] = 1;
        grid[23][7] = 1;
        grid[23][6] = 1;
        grid[23][5] = 1;
        grid[24][5] = 1;
        grid[25][5] = 1;
        grid[26][5] = 1;
        grid[27][5] = 1;
        grid[24][8] = 1;
        grid[25][8] = 1;
        grid[26][8] = 1;
        grid[24][11] = 1;
        grid[25][11] = 1;
        grid[26][11] = 1;
        grid[27][11] = 1;
        
        
        
        //O for OVER part
        grid[9][16] = 1;
        grid[8][15] = 1;
        grid[7][15] = 1;
        grid[6][15] = 1;
        grid[5][16] = 1;
        grid[5][17] = 1;
        grid[5][18] = 1;
        grid[5][19] = 1;
        grid[5][20] = 1;
        grid[6][21] = 1;
        grid[7][21] = 1;
        grid[8][21] = 1;
        grid[9][20] = 1;
        grid[9][19] = 1;
        grid[9][18] = 1;
        grid[9][17] = 1;
        
        //V
        grid[11][15] = 1;
        grid[11][16] = 1;
        grid[11][17] = 1;
        grid[11][18] = 1;
        grid[11][19] = 1;
        grid[12][20] = 1;
        grid[13][21] = 1;
        grid[14][20] = 1;
        grid[15][19] = 1;
        grid[15][15] = 1;
        grid[15][16] = 1;
        grid[15][17] = 1;
        grid[15][18] = 1;
        grid[15][19] = 1;
        
        //E
        grid[17][21] = 1;
        grid[17][20] = 1;
        grid[17][19] = 1;
        grid[17][18] = 1;
        grid[17][17] = 1;
        grid[17][16] = 1;
        grid[17][15] = 1;
        grid[18][15] = 1;
        grid[19][15] = 1;
        grid[20][15] = 1;
        grid[21][15] = 1;
        grid[18][21] = 1;
        grid[19][21] = 1;
        grid[20][21] = 1;
        grid[21][21] = 1;
        grid[18][18] = 1;
        grid[19][18] = 1;
        grid[20][18] = 1;
        
        //R
        grid[23][21] = 1;
        grid[23][20] = 1;
        grid[23][19] = 1;
        grid[23][18] = 1;
        grid[23][17] = 1;
        grid[23][16] = 1;
        grid[24][15] = 1;
        grid[25][15] = 1;
        grid[26][15] = 1;
        grid[27][16] = 1;
        grid[27][17] = 1;
        grid[26][18] = 1;
        grid[25][18] = 1;
        grid[24][18] = 1;
        grid[25][19] = 1;
        grid[26][20] = 1;
        grid[27][21] = 1;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
